{"ast":null,"code":"import _objectSpread from \"/home/cash/Documents/PostOffice/Frontend-React/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { apiPost } from '../utils/api';\nimport { List } from 'immutable';\nexport var PACKAGES_REQUEST = 'customer/PACKAGES_REQUEST';\nexport var PACKAGES_SUCCESS = 'customer/PACKAGES_SUCCESS';\nexport var CHANGE_NEW_PACKAGE_VIEW = 'customer/CHANGE_NEW_PACKAGE_VIEW';\nexport var NEW_PACKAGE_SUCCESS = 'customer/NEW_PACKAGE_SUCCESS';\nexport var ERROR = 'customer/ERROR';\nexport var UPDATE_NEW_PACKAGE_EMAIL = 'customer/UPDATE_NEW_PACKAGE_EMAIL';\nexport var UPDATE_NEW_PACKAGE_ADDRESS = 'customer/UPDATE_NEW_PACKAGE_ADDRESS';\nexport var UPDATE_NEW_PACKAGE_WEIGHT = 'customer/UPDATE_NEW_PACKAGE_WEIGHT';\nvar initialState = {\n  packages: List([]),\n  newPackageViewStatus: false,\n  error: {\n    is: false,\n    msg: ''\n  },\n  newPackEmail: '',\n  newPackAddress: '',\n  newPackWeight: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PACKAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        packages: action.payload.packages\n      });\n\n    case CHANGE_NEW_PACKAGE_VIEW:\n      return _objectSpread({}, state, {\n        newPackageViewStatus: action.payload.status\n      });\n\n    case ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case UPDATE_NEW_PACKAGE_ADDRESS:\n      return _objectSpread({}, state, {\n        newPackAddress: action.payload.address\n      });\n\n    case UPDATE_NEW_PACKAGE_EMAIL:\n      return _objectSpread({}, state, {\n        newPackEmail: action.payload.email\n      });\n\n    case UPDATE_NEW_PACKAGE_WEIGHT:\n      return _objectSpread({}, state, {\n        newPackWeight: action.payload.weight\n      });\n\n    case UPDATE_NEW_PACKAGE_DROPOFF:\n      return _objectSpread({}, state, {\n        newPackDropOff: action.payload.dropoff\n      });\n\n    default:\n      return state;\n  }\n});\nexport var getPackages = function getPackages(id) {\n  return function (dispatch) {\n    dispatch({\n      type: PACKAGES_REQUEST\n    });\n    apiPost('/customer/packages', {\n      id: id\n    }).then(function (respJSON) {\n      dispatch({\n        type: PACKAGES_SUCCESS,\n        payload: {\n          packages: respJSON.packages\n        }\n      });\n    });\n  };\n};\nexport var changeNewPackageView = function changeNewPackageView(status) {\n  return function (dispatch) {\n    dispatch({\n      type: CHANGE_NEW_PACKAGE_VIEW,\n      payload: {\n        status: !status\n      }\n    });\n  };\n};\nexport var newPackage = function newPackage(info) {\n  console.log(info);\n  return function (dispatch) {\n    apiPost('/customer/newPackage', info).then(function (respJSON) {\n      if (respJSON.success) {\n        console.log(respJSON);\n        dispatch({\n          type: NEW_PACKAGE_SUCCESS\n        });\n        window.location.reload();\n      } else {\n        changeNewPackageView(true);\n        throw new Error('Could not make new package');\n      }\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: {\n          error: {\n            is: true,\n            msg: error.message\n          }\n        }\n      });\n    });\n  };\n};\nexport var updateNewPackageEmail = function updateNewPackageEmail(email) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_EMAIL,\n      payload: {\n        email: email\n      }\n    });\n  };\n};\nexport var updateNewPackageAddress = function updateNewPackageAddress(address) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_ADDRESS,\n      payload: {\n        address: address\n      }\n    });\n  };\n};\nexport var updateNewPackageWeight = function updateNewPackageWeight(weight) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_WEIGHT,\n      payload: {\n        weight: weight\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/cash/Documents/PostOffice/Frontend-React/src/reducers/customer.js"],"names":["apiPost","List","PACKAGES_REQUEST","PACKAGES_SUCCESS","CHANGE_NEW_PACKAGE_VIEW","NEW_PACKAGE_SUCCESS","ERROR","UPDATE_NEW_PACKAGE_EMAIL","UPDATE_NEW_PACKAGE_ADDRESS","UPDATE_NEW_PACKAGE_WEIGHT","initialState","packages","newPackageViewStatus","error","is","msg","newPackEmail","newPackAddress","newPackWeight","state","action","type","payload","status","address","email","weight","UPDATE_NEW_PACKAGE_DROPOFF","newPackDropOff","dropoff","getPackages","id","dispatch","then","respJSON","changeNewPackageView","newPackage","info","console","log","success","window","location","reload","Error","catch","message","updateNewPackageEmail","updateNewPackageAddress","updateNewPackageWeight"],"mappings":"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","sourcesContent":["import { apiPost } from '../utils/api'\nimport { List } from 'immutable'\n\nexport const PACKAGES_REQUEST = 'customer/PACKAGES_REQUEST';\nexport const PACKAGES_SUCCESS = 'customer/PACKAGES_SUCCESS';\nexport const CHANGE_NEW_PACKAGE_VIEW = 'customer/CHANGE_NEW_PACKAGE_VIEW';\nexport const NEW_PACKAGE_SUCCESS = 'customer/NEW_PACKAGE_SUCCESS';\nexport const ERROR = 'customer/ERROR';\nexport const UPDATE_NEW_PACKAGE_EMAIL = 'customer/UPDATE_NEW_PACKAGE_EMAIL';\nexport const UPDATE_NEW_PACKAGE_ADDRESS = 'customer/UPDATE_NEW_PACKAGE_ADDRESS';\nexport const UPDATE_NEW_PACKAGE_WEIGHT = 'customer/UPDATE_NEW_PACKAGE_WEIGHT';\n\nconst initialState = {\n  packages: List([]),\n  newPackageViewStatus: false,\n  error: { is: false, msg: '' },\n  newPackEmail: '',\n  newPackAddress: '',\n  newPackWeight: 0,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case PACKAGES_SUCCESS:\n      return {\n        ...state,\n        packages: action.payload.packages\n      };\n    case CHANGE_NEW_PACKAGE_VIEW:\n      return {\n        ...state,\n        newPackageViewStatus: action.payload.status\n      };\n    case ERROR:\n      return {\n        ...state,\n        error: action.payload.error\n      };\n    case UPDATE_NEW_PACKAGE_ADDRESS:\n      return {\n        ...state,\n        newPackAddress: action.payload.address\n      };\n    case UPDATE_NEW_PACKAGE_EMAIL:\n      return {\n        ...state,\n        newPackEmail: action.payload.email\n      };\n    case UPDATE_NEW_PACKAGE_WEIGHT:\n      return {\n        ...state,\n        newPackWeight: action.payload.weight\n      };\n    case UPDATE_NEW_PACKAGE_DROPOFF:\n      return {\n        ...state,\n        newPackDropOff: action.payload.dropoff\n      };\n    default:\n      return state\n  }\n}\n\nexport const getPackages = (id) => {\n  return dispatch =>{\n    dispatch({ type: PACKAGES_REQUEST })\n    apiPost('/customer/packages', { id: id })\n      .then((respJSON) => {\n        dispatch({ type: PACKAGES_SUCCESS, payload: { packages: respJSON.packages } })\n      })\n  }\n};\n\nexport const changeNewPackageView = (status) => {\n  return dispatch => {\n    dispatch({ type: CHANGE_NEW_PACKAGE_VIEW, payload: { status: !status } })\n  }\n};\n\nexport const newPackage = (info) => {\n  console.log(info);\n  return dispatch => {\n    apiPost('/customer/newPackage', info)\n      .then((respJSON) => {\n        if (respJSON.success) {\n          console.log(respJSON)\n          dispatch({ type: NEW_PACKAGE_SUCCESS })\n          window.location.reload()\n        } else {\n          changeNewPackageView(true)\n          throw new Error('Could not make new package')\n        }\n      })\n      .catch((error) => {\n        dispatch({ type: ERROR, payload: { error: { is: true, msg: error.message } } })\n      })\n  }\n};\n\nexport const updateNewPackageEmail = (email) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_EMAIL, payload: { email: email } })\n  }\n};\n\nexport const updateNewPackageAddress = (address) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_ADDRESS, payload: { address: address } })\n  }\n};\n\nexport const updateNewPackageWeight= (weight) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_WEIGHT, payload: { weight: weight } })\n  }\n};\n"]},"metadata":{},"sourceType":"module"}