{"ast":null,"code":"import _objectSpread from \"/home/cash/Documents/PostOffice/Frontend-React/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { push } from 'connected-react-router';\nimport { apiPost } from '../utils/api';\nimport { List, Map } from 'immutable';\nexport var PACKAGES_REQUEST = 'customer/PACKAGES_REQUEST';\nexport var PACKAGES_SUCCESS = 'customer/PACKAGES_SUCCESS';\nexport var PACKAGES_FAILED = 'customer/PACKAGES_FAILED';\nexport var CHANGE_NEW_PACKAGE_VIEW = 'customer/CHANGE_NEW_PACKAGE_VIEW';\nexport var NEW_PACKAGE_SUCCESS = 'customer/NEW_PACKAGE_SUCCESS';\nexport var ERROR = 'customer/ERROR';\nexport var UPDATE_NEW_PACKAGE_EMAIL = 'customer/UPDATE_NEW_PACKAGE_EMAIL';\nexport var UPDATE_NEW_PACKAGE_ADDRESS = 'customer/UPDATE_NEW_PACKAGE_ADDRESS';\nexport var UPDATE_NEW_PACKAGE_WEIGHT = 'customer/UPDATE_NEW_PACKAGE_WEIGHT';\nexport var UPDATE_NEW_PACKAGE_DROPOFF = 'customer/UPDATE_NEW_PACKAGE_DROPOFF';\nexport var GET_STATE_FACILITES = 'customer/GET_STATE_FACILITES';\nvar initialState = {\n  packages: List([]),\n  newPackageViewStatus: false,\n  error: {\n    is: false,\n    msg: ''\n  },\n  newPackEmail: '',\n  newPackAddress: '',\n  newPackWeight: 0,\n  newPackDropOff: {},\n  stateFacilities: Map({})\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PACKAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        packages: action.payload.packages\n      });\n\n    case CHANGE_NEW_PACKAGE_VIEW:\n      return _objectSpread({}, state, {\n        newPackageViewStatus: action.payload.status\n      });\n\n    case ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case UPDATE_NEW_PACKAGE_ADDRESS:\n      return _objectSpread({}, state, {\n        newPackAddress: action.payload.address\n      });\n\n    case UPDATE_NEW_PACKAGE_EMAIL:\n      return _objectSpread({}, state, {\n        newPackEmail: action.payload.email\n      });\n\n    case UPDATE_NEW_PACKAGE_WEIGHT:\n      return _objectSpread({}, state, {\n        newPackWeight: action.payload.weight\n      });\n\n    case UPDATE_NEW_PACKAGE_DROPOFF:\n      return _objectSpread({}, state, {\n        newPackDropOff: action.payload.dropoff\n      });\n\n    default:\n      return state;\n  }\n});\nexport var getPackages = function getPackages(id) {\n  return function (dispatch) {\n    console.log('asdfasdfasdf');\n    dispatch({\n      type: PACKAGES_REQUEST\n    });\n    apiPost('/customer/packages', {\n      id: id\n    }).then(function (respJSON) {\n      dispatch({\n        type: PACKAGES_SUCCESS,\n        payload: {\n          packages: respJSON.packages\n        }\n      });\n    });\n  };\n};\nexport var changeNewPackageView = function changeNewPackageView(status) {\n  return function (dispatch) {\n    dispatch({\n      type: CHANGE_NEW_PACKAGE_VIEW,\n      payload: {\n        status: !status\n      }\n    });\n  };\n};\nexport var newPackage = function newPackage(info) {\n  return function (dispatch) {\n    apiPost('/customer/newPackage', info).then(function (respJSON) {\n      if (respJSON.success) {\n        dispatch({\n          type: NEW_PACKAGE_SUCCESS\n        });\n        window.location.reload();\n      } else {\n        changeNewPackageView(true);\n        throw new Error('Could not make new package');\n      }\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: {\n          error: {\n            is: true,\n            msg: error.message\n          }\n        }\n      });\n    });\n  };\n};\nexport var updateNewPackageEmail = function updateNewPackageEmail(email) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_EMAIL,\n      payload: {\n        email: email\n      }\n    });\n  };\n};\nexport var updateNewPackageAddress = function updateNewPackageAddress(address) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_ADDRESS,\n      payload: {\n        address: address\n      }\n    });\n  };\n};\nexport var updateNewPackageWeight = function updateNewPackageWeight(weight) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_WEIGHT,\n      payload: {\n        weight: weight\n      }\n    });\n  };\n};\nexport var updateNewPackageDropOff = function updateNewPackageDropOff(dropoff) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_NEW_PACKAGE_DROPOFF,\n      payload: {\n        dropoff: dropoff\n      }\n    });\n  };\n};\n\nvar transformFacilitiesToMap = function transformFacilitiesToMap(fac) {\n  var obj = {};\n  fac.forEach(function (f) {\n    obj[f.address] = f.id;\n  });\n  console.log(obj);\n  return Map(obj);\n};\n\nexport var getStateFacilities = function getStateFacilities(id) {\n  return function (dispatch) {\n    apiPost('facility/state', {\n      id: id\n    }).then(function (resp) {\n      dispatch({\n        type: GET_STATE_FACILITES,\n        payload: {\n          fac: transformFacilitiesToMap(resp.facilities)\n        }\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: ERROR,\n        payload: {\n          error: {\n            is: true,\n            msg: error.message\n          }\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/cash/Documents/PostOffice/Frontend-React/src/reducers/customer.js"],"names":["push","apiPost","List","Map","PACKAGES_REQUEST","PACKAGES_SUCCESS","PACKAGES_FAILED","CHANGE_NEW_PACKAGE_VIEW","NEW_PACKAGE_SUCCESS","ERROR","UPDATE_NEW_PACKAGE_EMAIL","UPDATE_NEW_PACKAGE_ADDRESS","UPDATE_NEW_PACKAGE_WEIGHT","UPDATE_NEW_PACKAGE_DROPOFF","GET_STATE_FACILITES","initialState","packages","newPackageViewStatus","error","is","msg","newPackEmail","newPackAddress","newPackWeight","newPackDropOff","stateFacilities","state","action","type","payload","status","address","email","weight","dropoff","getPackages","id","dispatch","console","log","then","respJSON","changeNewPackageView","newPackage","info","success","window","location","reload","Error","catch","message","updateNewPackageEmail","updateNewPackageAddress","updateNewPackageWeight","updateNewPackageDropOff","transformFacilitiesToMap","fac","obj","forEach","f","getStateFacilities","resp","facilities"],"mappings":"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","sourcesContent":["import { push } from 'connected-react-router'\nimport { apiPost } from '../utils/api'\nimport { List, Map } from 'immutable'\n\nexport const PACKAGES_REQUEST = 'customer/PACKAGES_REQUEST';\nexport const PACKAGES_SUCCESS = 'customer/PACKAGES_SUCCESS';\nexport const PACKAGES_FAILED = 'customer/PACKAGES_FAILED';\nexport const CHANGE_NEW_PACKAGE_VIEW = 'customer/CHANGE_NEW_PACKAGE_VIEW';\nexport const NEW_PACKAGE_SUCCESS = 'customer/NEW_PACKAGE_SUCCESS';\nexport const ERROR = 'customer/ERROR';\nexport const UPDATE_NEW_PACKAGE_EMAIL = 'customer/UPDATE_NEW_PACKAGE_EMAIL';\nexport const UPDATE_NEW_PACKAGE_ADDRESS = 'customer/UPDATE_NEW_PACKAGE_ADDRESS';\nexport const UPDATE_NEW_PACKAGE_WEIGHT = 'customer/UPDATE_NEW_PACKAGE_WEIGHT';\nexport const UPDATE_NEW_PACKAGE_DROPOFF = 'customer/UPDATE_NEW_PACKAGE_DROPOFF';\nexport const GET_STATE_FACILITES = 'customer/GET_STATE_FACILITES';\n\nconst initialState = {\n  packages: List([]),\n  newPackageViewStatus: false,\n  error: { is: false, msg: '' },\n  newPackEmail: '',\n  newPackAddress: '',\n  newPackWeight: 0,\n  newPackDropOff: {},\n  stateFacilities: Map({})\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case PACKAGES_SUCCESS:\n      return {\n        ...state,\n        packages: action.payload.packages\n      };\n    case CHANGE_NEW_PACKAGE_VIEW:\n      return {\n        ...state,\n        newPackageViewStatus: action.payload.status\n      };\n    case ERROR:\n      return {\n        ...state,\n        error: action.payload.error\n      };\n    case UPDATE_NEW_PACKAGE_ADDRESS:\n      return {\n        ...state,\n        newPackAddress: action.payload.address\n      };\n    case UPDATE_NEW_PACKAGE_EMAIL:\n      return {\n        ...state,\n        newPackEmail: action.payload.email\n      };\n    case UPDATE_NEW_PACKAGE_WEIGHT:\n      return {\n        ...state,\n        newPackWeight: action.payload.weight\n      };\n    case UPDATE_NEW_PACKAGE_DROPOFF:\n      return {\n        ...state,\n        newPackDropOff: action.payload.dropoff\n      };\n    default:\n      return state\n  }\n}\n\nexport const getPackages = (id) => {\n  return dispatch =>{\n    console.log('asdfasdfasdf')\n    dispatch({ type: PACKAGES_REQUEST })\n    apiPost('/customer/packages', { id: id })\n      .then((respJSON) => {\n        dispatch({ type: PACKAGES_SUCCESS, payload: { packages: respJSON.packages } })\n      })\n  }\n};\n\nexport const changeNewPackageView = (status) => {\n  return dispatch => {\n    dispatch({ type: CHANGE_NEW_PACKAGE_VIEW, payload: { status: !status } })\n  }\n};\n\nexport const newPackage = (info) => {\n  return dispatch => {\n    apiPost('/customer/newPackage', info)\n      .then((respJSON) => {\n        if (respJSON.success) {\n          dispatch({ type: NEW_PACKAGE_SUCCESS })\n          window.location.reload()\n        } else {\n          changeNewPackageView(true)\n          throw new Error('Could not make new package')\n        }\n      })\n      .catch((error) => {\n        dispatch({ type: ERROR, payload: { error: { is: true, msg: error.message } } })\n      })\n  }\n};\n\nexport const updateNewPackageEmail = (email) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_EMAIL, payload: { email: email } })\n  }\n};\n\nexport const updateNewPackageAddress = (address) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_ADDRESS, payload: { address: address } })\n  }\n};\n\nexport const updateNewPackageWeight= (weight) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_WEIGHT, payload: { weight: weight } })\n  }\n};\n\nexport const updateNewPackageDropOff = (dropoff) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_NEW_PACKAGE_DROPOFF, payload: { dropoff: dropoff} })\n  }\n};\n\nconst transformFacilitiesToMap = (fac) => {\n  let obj = {};\n  fac.forEach((f) => {\n    obj[f.address] = f.id;\n  })\n  console.log(obj);\n  return Map(obj);\n};\n\nexport const getStateFacilities = (id) => {\n  return dispatch => {\n      apiPost('facility/state', { id: id})\n        .then((resp) => {\n          dispatch({ type: GET_STATE_FACILITES, payload: { fac: transformFacilitiesToMap(resp.facilities) } })\n        })\n    .catch((error) => {\n        dispatch({ type: ERROR, payload: { error: { is: true, msg: error.message } } })\n      })\n  }\n};\n"]},"metadata":{},"sourceType":"module"}