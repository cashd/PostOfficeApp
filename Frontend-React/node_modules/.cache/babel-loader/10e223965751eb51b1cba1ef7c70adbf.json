{"ast":null,"code":"import _objectSpread from \"/home/cash/Documents/PostOffice/Frontend-React/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { push } from 'connected-react-router';\nimport { apiPost } from '../utils/api';\nimport { getDomain } from '../utils/auth';\nimport Cookie from 'js-cookie';\nexport var UPDATE_PASSWORD_FIELD = 'login/UPDATE_PASSWORD_FIELD';\nexport var UPDATE_EMAIL_FIELD = 'login/UPDATE_EMAIL_FIELD';\nexport var REQUEST_LOGIN = 'login/REQUEST_LOGIN';\nexport var LOGIN_FAILED = 'login/LOGIN_FAILED';\nexport var LOGIN_SUCCESS = 'login/LOGIN_SUCCESS';\nvar initialState = {\n  email: \"\",\n  password: \"\",\n  error: {\n    is: false,\n    msg: \"\"\n  }\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_PASSWORD_FIELD:\n      return _objectSpread({}, state, {\n        password: action.payload.password\n      });\n\n    case UPDATE_EMAIL_FIELD:\n      return _objectSpread({}, state, {\n        email: action.payload.email\n      });\n\n    case REQUEST_LOGIN:\n      return state;\n\n    case LOGIN_FAILED:\n      return _objectSpread({}, state, {\n        error: action.payload.error\n      });\n\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n});\nexport var updatePasswordField = function updatePasswordField(password) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_PASSWORD_FIELD,\n      payload: {\n        password: password\n      }\n    });\n  };\n};\nexport var updateEmailField = function updateEmailField(email) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_EMAIL_FIELD,\n      payload: {\n        email: email\n      }\n    });\n  };\n};\nexport var checkLoginCredentials = function checkLoginCredentials(email, password) {\n  return function (dispatch) {\n    dispatch({\n      type: REQUEST_LOGIN\n    });\n    apiPost('/auth', {\n      email: email,\n      password: password\n    }).then(function (respJSON) {\n      console.log(respJSON);\n\n      if (respJSON[\"isAuth\"]) {\n        dispatch({\n          type: LOGIN_SUCCESS\n        });\n        Cookie.set('id', respJSON.id, {\n          domain: getDomain()\n        });\n        Cookie.set('role', respJSON.role, {\n          domain: getDomain()\n        });\n        console.log(Cookie.get('id'));\n        console.log(Cookie.get('role')); //dispatch(push('/'));\n      } else {\n        throw new Error('Invalid Credentials.');\n      }\n    }).catch(function (error) {\n      dispatch({\n        type: LOGIN_FAILED,\n        payload: {\n          error: {\n            is: true,\n            msg: error.message\n          }\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/cash/Documents/PostOffice/Frontend-React/src/reducers/login.js"],"names":["push","apiPost","getDomain","Cookie","UPDATE_PASSWORD_FIELD","UPDATE_EMAIL_FIELD","REQUEST_LOGIN","LOGIN_FAILED","LOGIN_SUCCESS","initialState","email","password","error","is","msg","state","action","type","payload","updatePasswordField","dispatch","updateEmailField","checkLoginCredentials","then","respJSON","console","log","set","id","domain","role","get","Error","catch","message"],"mappings":"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","sourcesContent":["import { push } from 'connected-react-router'\r\nimport { apiPost } from '../utils/api'\r\nimport { getDomain } from '../utils/auth';\r\nimport Cookie from 'js-cookie'\r\n\r\nexport const UPDATE_PASSWORD_FIELD = 'login/UPDATE_PASSWORD_FIELD';\r\nexport const UPDATE_EMAIL_FIELD = 'login/UPDATE_EMAIL_FIELD';\r\nexport const REQUEST_LOGIN = 'login/REQUEST_LOGIN';\r\nexport const LOGIN_FAILED = 'login/LOGIN_FAILED';\r\nexport const LOGIN_SUCCESS = 'login/LOGIN_SUCCESS';\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    password: \"\",\r\n    error: { is: false, msg: \"\" },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_PASSWORD_FIELD:\r\n      return {\r\n        ...state,\r\n        password: action.payload.password\r\n      };\r\n    case UPDATE_EMAIL_FIELD:\r\n      return {\r\n        ...state,\r\n        email: action.payload.email\r\n      };\r\n    case REQUEST_LOGIN:\r\n      return state;\r\n    case LOGIN_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.payload.error\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const updatePasswordField = (password) => {\r\n  return dispatch => {\r\n    dispatch({ type: UPDATE_PASSWORD_FIELD, payload: { password:password } })\r\n  }\r\n};\r\n\r\nexport const updateEmailField = (email) => {\r\n  return dispatch => {\r\n    dispatch({ type: UPDATE_EMAIL_FIELD, payload: { email:email } })\r\n  }\r\n};\r\n\r\nexport const checkLoginCredentials = (email, password) => {\r\n  return dispatch => {\r\n    dispatch({ type: REQUEST_LOGIN });\r\n    apiPost('/auth', { email: email, password: password })\r\n      .then((respJSON) => {\r\n        console.log(respJSON)\r\n      if (respJSON[\"isAuth\"]) {\r\n        dispatch({ type: LOGIN_SUCCESS })\r\n        Cookie.set('id', respJSON.id, { domain: getDomain() });\r\n        Cookie.set('role', respJSON.role, { domain: getDomain() });\r\n        console.log(Cookie.get('id'))\r\n        console.log(Cookie.get('role'))\r\n        //dispatch(push('/'));\r\n      } else {\r\n         throw new Error('Invalid Credentials.')\r\n      }\r\n    })\r\n      .catch((error) => {\r\n        dispatch({ type: LOGIN_FAILED, payload: { error: { is: true, msg: error.message } } })\r\n        })\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}