{"ast":null,"code":"import _objectSpread from \"/home/cash/Documents/PostOffice/Frontend-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport var UPDATE_PASSWORD_FIELD = 'login/UPDATE_PASSWORD_FIELD';\nexport var UPDATE_EMAIL_FIELD = 'login/UPDATE_EMAIL_FIELD';\nexport var REQUEST_LOGIN = 'login/REQUEST_LOGIN';\nexport var LOGIN_FAILED = 'login/LOGIN_FAILED';\nexport var LOGIN_SUCCESS = 'login/LOGIN_SUCCESS';\nvar initialState = {\n  email: \"\",\n  password: \"\",\n  errorMsg: \"\"\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_PASSWORD_FIELD:\n      return _objectSpread({}, state, {\n        password: action.payload.password\n      });\n\n    case UPDATE_EMAIL_FIELD:\n      return _objectSpread({}, state, {\n        email: action.payload.email\n      });\n\n    case REQUEST_LOGIN:\n      return state;\n\n    case LOGIN_FAILED:\n      return _objectSpread({}, state, {\n        errorMsg: action.payload.errorMsg\n      });\n\n    default:\n      return state;\n  }\n});\nexport var updatePasswordField = function updatePasswordField(password) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_PASSWORD_FIELD,\n      payload: {\n        password: password\n      }\n    });\n  };\n};\nexport var updateEmailField = function updateEmailField(email) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_EMAIL_FIELD,\n      payload: {\n        email: email\n      }\n    });\n  };\n};\nexport var checkLoginCredinials = function checkLoginCredinials(email, password) {\n  return function (dispatch) {\n    dispatch({\n      type: REQUEST_LOGIN\n    }); // Check email and password not null\n    // Check email regex\n\n    fetch('http://api.team9postoffice.ga/auth', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      return console.log(resp);\n    });\n  };\n};","map":{"version":3,"sources":["/home/cash/Documents/PostOffice/Frontend-React/src/reducers/login.js"],"names":["UPDATE_PASSWORD_FIELD","UPDATE_EMAIL_FIELD","REQUEST_LOGIN","LOGIN_FAILED","LOGIN_SUCCESS","initialState","email","password","errorMsg","state","action","type","payload","updatePasswordField","dispatch","updateEmailField","checkLoginCredinials","fetch","method","headers","body","JSON","stringify","then","resp","json","console","log"],"mappings":";AAAA,OAAO,IAAMA,qBAAqB,GAAG,6BAA9B;AACP,OAAO,IAAMC,kBAAkB,GAAG,0BAA3B;AACP,OAAO,IAAMC,aAAa,GAAG,qBAAtB;AACP,OAAO,IAAMC,YAAY,GAAG,oBAArB;AACP,OAAO,IAAMC,aAAa,GAAG,qBAAtB;AAEP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,qBAAL;AACE,+BACKS,KADL;AAEEF,QAAAA,QAAQ,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAF3B;;AAIF,SAAKN,kBAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeN;AAFxB;;AAIF,SAAKJ,aAAL;AACE,aAAOO,KAAP;;AACF,SAAKN,YAAL;AACE,+BACKM,KADL;AAEED,QAAAA,QAAQ,EAAEE,MAAM,CAACE,OAAP,CAAeJ;AAF3B;;AAIF;AACE,aAAOC,KAAP;AAnBJ;AAqBD,CAtBD;AAwBA,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACN,QAAD,EAAc;AAC/C,SAAO,UAAAO,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEX,qBAAR;AAA+BY,MAAAA,OAAO,EAAE;AAAEL,QAAAA,QAAQ,EAACA;AAAX;AAAxC,KAAD,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,KAAD,EAAW;AACzC,SAAO,UAAAQ,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEV,kBAAR;AAA4BW,MAAAA,OAAO,EAAE;AAAEN,QAAAA,KAAK,EAACA;AAAR;AAArC,KAAD,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,IAAMU,oBAAoB,GAAE,SAAtBA,oBAAsB,CAACV,KAAD,EAAQC,QAAR,EAAqB;AACtD,SAAO,UAAAO,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR,CADiB,CAGjB;AACA;;AACAe,IAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,kBAAU,mCADH;AAEP,wBAAgB;AAFT,OAFiC;AAM1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAChB,QAAAA,KAAK,EAAEA,KAAR;AAAeC,QAAAA,QAAQ,EAAEA;AAAzB,OAAf;AANoC,KAAvC,CAAL,CAOGgB,IAPH,CAOQ,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KAPZ,EAO6BF,IAP7B,CAOkC,UAAAC,IAAI;AAAA,aAAIE,OAAO,CAACC,GAAR,CAAYH,IAAZ,CAAJ;AAAA,KAPtC;AAQD,GAbD;AAcD,CAfM","sourcesContent":["export const UPDATE_PASSWORD_FIELD = 'login/UPDATE_PASSWORD_FIELD';\nexport const UPDATE_EMAIL_FIELD = 'login/UPDATE_EMAIL_FIELD';\nexport const REQUEST_LOGIN = 'login/REQUEST_LOGIN';\nexport const LOGIN_FAILED = 'login/LOGIN_FAILED';\nexport const LOGIN_SUCCESS = 'login/LOGIN_SUCCESS';\n\nconst initialState = {\n  email: \"\",\n  password: \"\",\n  errorMsg: \"\",\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PASSWORD_FIELD:\n      return {\n        ...state,\n        password: action.payload.password\n      };\n    case UPDATE_EMAIL_FIELD:\n      return {\n        ...state,\n        email: action.payload.email\n      };\n    case REQUEST_LOGIN:\n      return state;\n    case LOGIN_FAILED:\n      return {\n        ...state,\n        errorMsg: action.payload.errorMsg\n      };\n    default:\n      return state\n  }\n}\n\nexport const updatePasswordField = (password) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_PASSWORD_FIELD, payload: { password:password } })\n  }\n};\n\nexport const updateEmailField = (email) => {\n  return dispatch => {\n    dispatch({ type: UPDATE_EMAIL_FIELD, payload: { email:email } })\n  }\n};\n\nexport const checkLoginCredinials= (email, password) => {\n  return dispatch => {\n    dispatch({ type: REQUEST_LOGIN });\n\n    // Check email and password not null\n    // Check email regex\n    fetch('http://api.team9postoffice.ga/auth', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({email: email, password: password})\n    }).then(resp => resp.json()).then(resp => console.log(resp))\n  }\n};"]},"metadata":{},"sourceType":"module"}