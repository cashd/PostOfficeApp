{"ast":null,"code":"import _objectSpread from \"/home/cash/Documents/PostOffice/Frontend-React/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { push } from 'connected-react-router';\nimport { apiPost } from '../utils/api';\nimport Cookie from 'js-cookie';\nimport { List } from 'immutable';\nexport var PACKAGES_REQUEST = 'customer/PACKAGES_REQUEST';\nexport var PACKAGES_SUCCESS = 'customer/PACKAGES_SUCCESS';\nexport var PACKAGES_FAILED = 'customer/PACKAGES_SUCCESS';\nexport var CHANGE_NEW_PACKAGE_VIEW = 'customer/CHANGE_NEW_PACKAGE_VIEW';\nvar initialState = {\n  packages: List([]),\n  newPackageViewStatus: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PACKAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        packages: action.payload.packages\n      });\n\n    case CHANGE_NEW_PACKAGE_VIEW:\n      return _objectSpread({}, state, {\n        newPackageViewStatus: action.payload.status\n      });\n\n    default:\n      return state;\n  }\n});\nexport var getPackages = function getPackages(id) {\n  return function (dispatch) {\n    console.log('asdfasdfasdf');\n    dispatch({\n      type: PACKAGES_REQUEST\n    });\n    apiPost('/customer/packages', {\n      id: id\n    }).then(function (respJSON) {\n      dispatch({\n        type: PACKAGES_SUCCESS,\n        payload: {\n          packages: respJSON.packages\n        }\n      });\n    });\n  };\n};\nexport var changeNewPackageView = function changeNewPackageView() {\n  return function (dispatch) {\n    dispatch({\n      type: CHANGE_NEW_PACKAGE_VIEW,\n      payload: {\n        status: !newPackageViewStatus\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/cash/Documents/PostOffice/Frontend-React/src/reducers/customer.js"],"names":["push","apiPost","Cookie","List","PACKAGES_REQUEST","PACKAGES_SUCCESS","PACKAGES_FAILED","CHANGE_NEW_PACKAGE_VIEW","initialState","packages","newPackageViewStatus","state","action","type","payload","status","getPackages","id","dispatch","console","log","then","respJSON","changeNewPackageView"],"mappings":";AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,IAAT,QAAqB,WAArB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,2BAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,2BAAzB;AACP,OAAO,IAAMC,eAAe,GAAG,2BAAxB;AACP,OAAO,IAAMC,uBAAuB,GAAG,kCAAhC;AAEP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAEN,IAAI,CAAC,EAAD,CADK;AAEnBO,EAAAA,oBAAoB,EAAE;AAFH,CAArB;AAKA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,gBAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,QAAQ,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAF3B;;AAIF,SAAKF,uBAAL;AACE,+BACKI,KADL;AAEED,QAAAA,oBAAoB,EAAEE,MAAM,CAACE,OAAP,CAAeC;AAFvC;;AAIF;AACE,aAAOJ,KAAP;AAZJ;AAcD,CAfD;AAiBA,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAQ;AACjC,SAAO,UAAAC,QAAQ,EAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACAH,IAAAA,OAAO,CAAC,oBAAD,EAAuB;AAAEgB,MAAAA,EAAE,EAAEA;AAAN,KAAvB,CAAP,CACGI,IADH,CACQ,UAACC,QAAD,EAAc;AAClBJ,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAER,gBAAR;AAA0BS,QAAAA,OAAO,EAAE;AAAEL,UAAAA,QAAQ,EAAEa,QAAQ,CAACb;AAArB;AAAnC,OAAD,CAAR;AACD,KAHH;AAID,GAPD;AAQD,CATM;AAWP,OAAO,IAAMc,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACxC,SAAO,UAAAL,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAEN,uBAAR;AAAiCO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,MAAM,EAAE,CAACL;AAAX;AAA1C,KAAD,CAAR;AACD,GAFD;AAGD,CAJM","sourcesContent":["import { push } from 'connected-react-router'\nimport { apiPost } from '../utils/api'\nimport Cookie from 'js-cookie'\nimport { List } from 'immutable'\n\nexport const PACKAGES_REQUEST = 'customer/PACKAGES_REQUEST';\nexport const PACKAGES_SUCCESS = 'customer/PACKAGES_SUCCESS';\nexport const PACKAGES_FAILED = 'customer/PACKAGES_SUCCESS';\nexport const CHANGE_NEW_PACKAGE_VIEW = 'customer/CHANGE_NEW_PACKAGE_VIEW'\n\nconst initialState = {\n  packages: List([]),\n  newPackageViewStatus: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case PACKAGES_SUCCESS:\n      return {\n        ...state,\n        packages: action.payload.packages\n      };\n    case CHANGE_NEW_PACKAGE_VIEW:\n      return {\n        ...state,\n        newPackageViewStatus: action.payload.status\n      };\n    default:\n      return state\n  }\n}\n\nexport const getPackages = (id) => {\n  return dispatch =>{\n    console.log('asdfasdfasdf')\n    dispatch({ type: PACKAGES_REQUEST })\n    apiPost('/customer/packages', { id: id })\n      .then((respJSON) => {\n        dispatch({ type: PACKAGES_SUCCESS, payload: { packages: respJSON.packages } })\n      })\n  }\n};\n\nexport const changeNewPackageView = () => {\n  return dispatch => {\n    dispatch({ type: CHANGE_NEW_PACKAGE_VIEW, payload: { status: !newPackageViewStatus } })\n  }\n};\n"]},"metadata":{},"sourceType":"module"}